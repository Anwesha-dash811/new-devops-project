node {

def mvnHome

stage('Prepare') {
git url: 'https://github.com/Anwesha-dash811/devops-groovy-products-ci-cd-k8.git', branch: 'master'

mvnHome = tool 'mvn'

}
stage('Build') {

if (isUnix()) {

sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"

} else {
bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
}
}

stage('Unit Test') {

junit '**/target/surefire-reports/TEST-*.xml'

archive 'target/*.war'

}

stage('Integration Test') {
if (isUnix()) {
sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean verify"
} else {
bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean verify/)
}
}
/*
stage('Deploy') {
       bat 'curl -u admin:admin -F filedata=target/**.war "http://localhost:5050/manager/text/deploy?path=/devops&update=true"'
   }
   stage("Smoke Test"){
       bat "curl --retry-delay 10 --retry 5 http://localhost:5050/devops"
   }
  */

stage('Docker Build Image'){


           if (isUnix()) {
         sh "'${mvnHome}/bin/mvn' k8s:build k8s:resource"
      } else {
         bat(/"${mvnHome}\bin\mvn" k8s:build k8s:resource/)
      }
               

}

stage('DockerPush'){
withCredentials([usernamePassword(credentialsId:'DockerHubToken',usernameVariable:'DockerHubTokenUser',
passwordVariable:'DockerHubTokenPassword')]){
if (isUnix()) {
sh "docker login -u ${env.DockerHubTokenUser} -p ${DockerHubTokenPassword}"
sh "'${mvnHome}/bin/mvn' k8s:push"
} else {
bat("docker login -u ${env.DockerHubTokenUser} -p ${DockerHubTokenPassword}")
bat(/"${mvnHome}\bin\mvn" k8s:push/)
}
}
}

stage ('Kubernetes Deploy') {
           
             if (isUnix()) {
         sh "'${mvnHome}/bin/mvn' k8s:deploy"
            }
            else {
         bat(/"${mvnHome}\bin\mvn" k8s:deploy/)
      }
        }
        

stage('Sonar') {
if (isUnix()) {
sh "'${mvnHome}/bin/mvn' sonar:sonar"
} else {
bat(/"${mvnHome}\bin\mvn" sonar:sonar/)
}
}

       
stage('Publish') {
def server = Artifactory.server 'Artifactory'
def rtMaven = Artifactory.newMavenBuild()
rtMaven.tool = 'mvn'
rtMaven.resolver server: server, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'install'
server.publishBuildInfo buildInfo
}

	


}